Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.


class Solution {
    static char pair (char c){
        switch (c){
            case ')': return '(';
            case ']': return '[';
            case '}': return '{';
            default: return 'e';
        }
    }
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++){
            if (s.charAt(i) == '(' || s.charAt(i) == '[' || s.charAt(i) == '{'){
                stack.push(s.charAt(i));
            }
            else if (!stack.isEmpty() && stack.peek() == pair(s.charAt(i))){
                stack.pop();
            }
            else{
                return false;
            }
            
        }
        if (stack.isEmpty()){
            return true;
        }
        return false;
    }
}

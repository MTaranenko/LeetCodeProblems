Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.


class Solution {
    private int keysN1(String n, int x){
        int counter = 0;
        String ns = n;
        if (ns.charAt(0) == '0' && x == 1){
            return 0;
        }
        if (ns.charAt(0) == '0'){
            return keysN1((ns.substring(1)), x - 1);
        }
        if (x == 1){
            return 1;
        }
        else if (x == 2){
            if (ns.charAt(0) == '1'){
                if (((int) ns.charAt(1) - 48) >= 1){
                    counter += 1;
                }
                counter += ((int) ns.charAt(1) - 48) + 2;
            }
            else if ((int)(ns.charAt(1) - 48) >= 1){
                counter += ((int)ns.charAt(0) - 48) + 11;
            }
            else {
                counter += ((int) ns.charAt(0) - 48) + 10;
            }
            return counter;
        }
        else if(x == 3){
            if (ns.charAt(0) == '1'){
                counter += 20 + Integer.parseInt(ns.substring(1)) +
                        keysN1(ns.substring(1), x - 1) + 1;
            }
            else {
                counter += 20  * ((int) ns.charAt(0) - 48) + 100 +
                        keysN1(ns.substring(1), x - 1);
            }
            return counter;
        }
        else{
            if (ns.charAt(0) == '1'){
                counter += 20 * Math.pow(10, x - 3) +  (x - 3) * Math.pow(10, x - 2)
                        + 1 + Integer.parseInt(ns.substring(1));
            }
            else{
                counter += (20 * Math.pow(10, x - 3) + (x - 3) * Math.pow(10, x - 2)) * ((int) ns.charAt(0) - 48)
                        + Math.pow(10, x - 1);
            }
            counter += keysN1(ns.substring(1), x - 1);
            return counter;
        }
    }

    public int countDigitOne(int n) {
        int x = String.valueOf(n).length();
        return keysN1(String.valueOf(n), x);
    }
}

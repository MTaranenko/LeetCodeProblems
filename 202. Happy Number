Write an algorithm to determine if a number n is happy.
A happy number is a number defined by the following process:
Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.


Solution 1

class Solution {
    public int sumDigits (int n){
        int sum = 0;
        for (int i = 0; i <= (int) Math.log10(n); i++){
            sum += Math.pow((int) (n % Math.pow(10, i + 1) / Math.pow(10, i)), 2);
        }
        return sum;
    }
    public boolean isHappy(int n) {
        String uniqueKeys = String.valueOf(n) + ", ";
        while (n != 1){
            n = sumDigits(n);
            if (uniqueKeys.contains(' ' + String.valueOf(n) + ',')){return false;}
            uniqueKeys += String.valueOf(n) + ", ";
        }
        return true;
    }
}

Solution 2

class Solution {
    public int sumDigits (int n){
        int sum = 0;
        while (n > 0){
            sum += (n % 10) * (n % 10);
            n /= 10;
        }
        return sum;
    }
    public boolean isHappy(int n) {
        HashSet<Integer> hs = new HashSet<>();
        while (n != 1){
            n = sumDigits(n);
            if (hs.contains(n)){return false;}
            hs.add(n);
        }
        return true;
    }
}
